// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package dbpayments

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getSummaryApiUsage = `-- name: GetSummaryApiUsage :many
SELECT api, sum(amount), count(api) AS count
FROM payments
WHERE requested_at >= $1::timestamp AND requested_at < $2::timestamp
GROUP BY api
`

type GetSummaryApiUsageParams struct {
	Pfrom time.Time
	Pto   time.Time
}

type GetSummaryApiUsageRow struct {
	Api   int32
	Sum   pgtype.Numeric
	Count int64
}

func (q *Queries) GetSummaryApiUsage(ctx context.Context, arg GetSummaryApiUsageParams) ([]GetSummaryApiUsageRow, error) {
	rows, err := q.db.Query(ctx, getSummaryApiUsage, arg.Pfrom, arg.Pto)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSummaryApiUsageRow
	for rows.Next() {
		var i GetSummaryApiUsageRow
		if err := rows.Scan(&i.Api, &i.Sum, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPayment = `-- name: InsertPayment :exec
INSERT INTO payments (correlationId, amount, requested_at, api)
VALUES ($1, $2, $3, $4)
`

type InsertPaymentParams struct {
	Correlationid uuid.UUID
	Amount        pgtype.Numeric
	RequestedAt   time.Time
	Api           int32
}

func (q *Queries) InsertPayment(ctx context.Context, arg InsertPaymentParams) error {
	_, err := q.db.Exec(ctx, insertPayment,
		arg.Correlationid,
		arg.Amount,
		arg.RequestedAt,
		arg.Api,
	)
	return err
}
